<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>arvin&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-06-29T04:29:17.336Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>arvin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在laravel中使用vue</title>
    <link href="http://yoursite.com/2017/06/29/%E5%9C%A8laravel%E4%B8%AD%E4%BD%BF%E7%94%A8vue/"/>
    <id>http://yoursite.com/2017/06/29/在laravel中使用vue/</id>
    <published>2017-06-29T02:53:36.000Z</published>
    <updated>2017-06-29T04:29:17.336Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>很喜欢<code>element-ui</code>，本来想完全前后端独立的，但是考虑到后面的菜单权限不是很好搞，就在 laravel 中混合使用 vue　吧，虽然显得不伦不类。。。<br>整体框架使用　<strong>admin-lte</strong>，然后里面组件是用 <strong>vue</strong></p>
<a id="more"></a>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="安装admin-lte"><a href="#安装admin-lte" class="headerlink" title="安装admin-lte"></a>安装<strong>admin-lte</strong></h4><ol>
<li>安装： <code>composer require arvin/adminlte-for-laravel</code></li>
<li><p>配置：<br> 2.1. 添加 <code>Arvin\Admin\Providers\ArvinServiceProvider::class</code>, 到 <code>config/app.php</code>的providers<br> 2.2. <code>php artisan vendor:publish</code><br> 2.3. <code>resources/views/vendor/arvin/layouts/default.blade.php</code>文件，  </p>
<blockquote>
<ul>
<li><p><code>&lt;head&gt;</code>里面添加</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;   <span class="comment">&lt;!-- CSRF Token --&gt;</span></div><div class="line">&gt;   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"csrf-token"</span> <span class="attr">content</span>=<span class="string">"&#123;&#123; csrf_token() &#125;&#125;"</span>&gt;</span></div><div class="line">&gt;   <span class="comment">&lt;!-- Styles --&gt;</span></div><div class="line">&gt;   <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; asset('css/app.css') &#125;&#125;"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div><div class="line">&gt;</div></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;div class=&quot;wrapper&quot;&gt;</code> 添加　<code>id=&quot;app&quot;</code>  </p>
</li>
<li><figure class="highlight plain"><figcaption><span>src="&#123;&#123; asset('vendor/arvin/js/admin.min.js') &#125;&#125;">```前添加 ```<script src="&#123;&#123; asset('js/app.js') &#125;&#125;"></script>```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">3. 使用：</div><div class="line">    ```blade</div><div class="line">    @extends(&apos;arvin::layouts.default&apos;)</div><div class="line">    @section(&apos;content&apos;)</div><div class="line">        这里是 页面内容</div><div class="line">    @stop</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
</li>
</ol>
<h4 id="安装element-ui"><a href="#安装element-ui" class="headerlink" title="安装element-ui"></a>安装<strong>element-ui</strong></h4><ol>
<li>安装：　<code>npm i element-ui -D</code></li>
<li><p>配置：<br> <code>resources/assets/js/app.js</code>里添加：</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">'element-ui'</span>);</div><div class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-default/index.css'</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>使用：<br> 例如添加一个自定义<strong>form</strong>组件:<br> 首先创建文件<code>resources/assets/js/components/Form.vue</code>,这里面就是用<em>element-ui</em>的组件了<br> 然后在<code>resources/assets/js/app.js</code>内添加组件<code>Vue.component(&#39;v-form&#39;, require(&#39;./components/Form.vue&#39;));</code>就可以在 blade　里面使用了<code>&lt;v-form&gt;&lt;/v-form&gt;</code></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;很喜欢&lt;code&gt;element-ui&lt;/code&gt;，本来想完全前后端独立的，但是考虑到后面的菜单权限不是很好搞，就在 laravel 中混合使用 vue　吧，虽然显得不伦不类。。。&lt;br&gt;整体框架使用　&lt;strong&gt;admin-lte&lt;/strong&gt;，然后里面组件是用 &lt;strong&gt;vue&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/programming/"/>
    
    
      <category term="laravel" scheme="http://yoursite.com/tags/laravel/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 5.3 下添加自定义 Facade 的步骤</title>
    <link href="http://yoursite.com/2017/06/27/Laravel-5-3-%E4%B8%8B%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89-Facade-%E7%9A%84%E6%AD%A5%E9%AA%A4/"/>
    <id>http://yoursite.com/2017/06/27/Laravel-5-3-下添加自定义-Facade-的步骤/</id>
    <published>2017-06-27T07:03:05.000Z</published>
    <updated>2017-06-28T02:41:54.395Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原文链接 <a href="https://laravel-china.org/topics/3265/laravel-53-add-custom-facade-steps" target="_blank" rel="external">Laravel 5.3 下添加自定义 Facade 的步骤</a></p>
</blockquote>
<h5 id="1、目录结构"><a href="#1、目录结构" class="headerlink" title="1、目录结构"></a>1、目录结构</h5><p>我在 /app 下建立了一个自定义目录，结构如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/app</div><div class="line">|- Custom</div><div class="line">    |- Classes 这里放置自定义 Facade 所需的类</div><div class="line">    |- Facades 这里放置自定义 Facade</div></pre></td></tr></table></figure>
<a id="more"></a>
<h5 id="2、创建自定义-Facade-所需的类"><a href="#2、创建自定义-Facade-所需的类" class="headerlink" title="2、创建自定义 Facade 所需的类"></a>2、创建自定义 Facade 所需的类</h5><p>文件位置：<code>app/Custom/Classes/MLS.php</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Custom</span>\<span class="title">Classes</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MLS</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'MLS Test'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面这个 class 我只想实现一个功能，就是在调用 test() 方法时返回一个字符串。</p>
<h5 id="3、创建自定义-Facade"><a href="#3、创建自定义-Facade" class="headerlink" title="3、创建自定义 Facade"></a>3、创建自定义 Facade</h5><p>文件位置：<code>app/Custom/Facades/MLS.php</code></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Custom</span>\<span class="title">Facades</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Facade</span>; </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MLS</span> <span class="keyword">extends</span> <span class="title">Facade</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFacadeAccessor</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'mls'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个 class 没有什么可说的，就算不理解也请先当作一个规矩来照做。唯一会让初学者迷惑的是这个 return ‘mls’; 有人可能会问“mls”是什么，为什么只是一个字符串。这个问题如果想透彻的解释，那就必须从理解 Laravel 中的“容器”说开来，但可惜我对这个概念也是一知半解，不能误人子弟。如果大家对此感兴趣，可以去找一些讲解“容器”和 Facade 原理的文章，这里先不提，继续往下看。</p>
<h5 id="4、将自定义的-Facade-和自定义的-Class-绑定起来。"><a href="#4、将自定义的-Facade-和自定义的-Class-绑定起来。" class="headerlink" title="4、将自定义的 Facade 和自定义的 Class 绑定起来。"></a>4、将自定义的 Facade 和自定义的 Class 绑定起来。</h5><p>该步骤又分为2部分：</p>
<blockquote>
<p>部分1：创建与自定义 Facade 对应的 ServerProvider。</p>
</blockquote>
<p>在命令行下运行：</p>
<p><code>$ php artisan make:provider MLSServiceProvider</code><br>成功后会创建一个新文件：app/Providers/MLSServiceProvider.php，然后我们在 register() 部分添点东西，如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Providers</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Custom</span>\<span class="title">Classes</span>\<span class="title">MLS</span>; <span class="comment">//注意这里，引入了我们的自定义 Class</span></div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">ServiceProvider</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MLSServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Bootstrap the application services.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> void</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Register the application services.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> void</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//注意这里的 bind 写法，这是 Laravel 5.3 的正确写法；网上搜索到的很多资料都是不知何年何月的老版本的写法，如果你照抄就只会很郁闷。</span></div><div class="line">        <span class="keyword">$this</span>-&gt;app-&gt;bind(<span class="string">'mls'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MLS();</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>看到 bind() 部分了吗？对应写的也是“mls”，和自定义 Facade 中返回的一样。其实前后联系起来看就是，这个“mls”只是 Laravel 容器中的一个“代号”，前面的 Facade 返回“mls”是告诉”中介“，也就是 我们自定义的 ServiceProvider：“如果有人虚要调用我时，请使用我的代号是 mls”，然后 ServiceProvider 在 register() 这里则告诉框架：“我介绍一个叫 MLS 的类入伙了，它的代号是 mls！“。这样，框架在你调用 Facade 时就会在自己的”容器“里找到代号为”mls“的自定义类给你，你才能使用这个自定义类里的方法。</p>
<blockquote>
<p>部分2：将新添加的 ServiceProvider 写进框架的配置中</p>
</blockquote>
<p>编辑文件 <code>config/app.php</code>，里面有2个数组：providers 和 aliases。首先，在 providers 中添加：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="string">'providers'</span> =&gt; [</div><div class="line"></div><div class="line">        略</div><div class="line">        App\Providers\RouteServiceProvider::class,</div><div class="line"></div><div class="line">        App\Providers\MLSServiceProvider::class, <span class="comment">//我们新建的 Provider</span></div><div class="line"></div><div class="line">    ],</div></pre></td></tr></table></figure></p>
<p>然后，在 aliases 中添加：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="string">'aliases'</span> =&gt; [</div><div class="line"></div><div class="line">        <span class="string">'App'</span> =&gt; Illuminate\Support\Facades\App::class,</div><div class="line">        略</div><div class="line"></div><div class="line">        <span class="string">'MLS'</span> =&gt; App\Custom\Facades\MLS::class, <span class="comment">//这里写上我们的自定义 Facade</span></div><div class="line">    ],</div></pre></td></tr></table></figure></p>
<p>注意，aliases，也就是”别名“部分的”MLS“可以是任意我们喜欢的名字，它只是用来指代我们自定义的 Facade。</p>
<h5 id="5、结束了，可以使用我们的自定义-Facade-了。"><a href="#5、结束了，可以使用我们的自定义-Facade-了。" class="headerlink" title="5、结束了，可以使用我们的自定义 Facade 了。"></a>5、结束了，可以使用我们的自定义 Facade 了。</h5><p>好，现在假设我们已经设置好了路由规则，并准备好了一个 controller ，比如：<code>app/Http/Controllers/MLSController.php</code></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">MLS</span>; <span class="comment">//这里就是在 aliases 添加的别名了，如果别名换了，也请记得更新这里。</span></div><div class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MLSController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> MLS::test(); <span class="comment">//现在，我们就可以像使用静态类一样使用我们的自定义 Facade 了。</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到此，一个简单的自定义 Facade 就添加完成了。</p>
<p>其实，关于 Facade 的争论很大，反对它的人认为它不过是一个针对 Class 的语法糖和快捷方式，甚至认为它最大的意义不过是让程序员不用敲一堆代码才能引用一个 Class，也就是如下的区别：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">echo</span> App\Custom\Classes\MLS::test(); <span class="comment">//方式1</span></div><div class="line"></div><div class="line"><span class="keyword">echo</span> MLS::test(); <span class="comment">//方式2</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文链接 &lt;a href=&quot;https://laravel-china.org/topics/3265/laravel-53-add-custom-facade-steps&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Laravel 5.3 下添加自定义 Facade 的步骤&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;1、目录结构&quot;&gt;&lt;a href=&quot;#1、目录结构&quot; class=&quot;headerlink&quot; title=&quot;1、目录结构&quot;&gt;&lt;/a&gt;1、目录结构&lt;/h5&gt;&lt;p&gt;我在 /app 下建立了一个自定义目录，结构如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/app&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|- Custom&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    |- Classes 这里放置自定义 Facade 所需的类&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    |- Facades 这里放置自定义 Facade&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/programming/"/>
    
    
      <category term="laravel" scheme="http://yoursite.com/tags/laravel/"/>
    
      <category term="php" scheme="http://yoursite.com/tags/php/"/>
    
  </entry>
  
</feed>
